use std::path::PathBuf;

use anyhow::{bail, Result};
use clap::Args;
use ds_rom::{
    crypto::blowfish::BlowfishKey,
    rom::{Rom, RomLoadOptions, RomSaveError},
};

/// Builds a ROM from a path generated by `extract`
#[derive(Args, Clone)]
pub struct Build {
    /// Path to config YAML
    #[arg(long, short = 'c')]
    config: PathBuf,

    /// Nintendo DS ARM7 BIOS file
    #[arg(long, short = '7')]
    arm7_bios: Option<PathBuf>,

    /// Output ROM
    #[arg(long, short = 'o')]
    rom: PathBuf,
}

impl Build {
    pub fn run(&self) -> Result<()> {
        let key = if let Some(arm7_bios) = &self.arm7_bios {
            Some(BlowfishKey::from_arm7_bios_path(arm7_bios)?)
        } else {
            None
        };
        let rom = match Rom::load(&self.config, RomLoadOptions { key: key.as_ref(), ..Default::default() }) {
            Err(RomSaveError::BlowfishKeyNeeded) => {
                bail!("The ROM is encrypted, please provide ARM7 BIOS");
            }
            result => result?,
        };
        let raw_rom = rom.build(key.as_ref())?;
        raw_rom.save(&self.rom)?;
        Ok(())
    }
}
